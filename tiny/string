/* MSTRING.H
 * A simple string class which implements a reasonable subset
 * of the standard template basic_string class.
 * Part of the MLIB library
*/

#ifndef _MSTRING_H
#  define _MSTRING_H

#include <iostream>

class string {
//------------
 private:
   char * m_data;
   int m_length;

    int offs(const char * ss);
    char * alloc (int size);

 public:
  string (const char *str=0);
  string (int size);
  string (const string& s);
  string (const string& s,int flags);
  ~string ();

  typedef char *iterator;
  iterator begin()  { return m_data; }
  iterator end()    { return m_data+m_length; }

  int  length () const  { return m_length; }
  int  size   () const  { return m_length; }
  const char *  c_str () const  { return m_data; }

  string& operator = (const string &s);
  string& operator = (const char *str);
  char& operator [] (int i) { return m_data[i]; }

  void copy(const char *str, int sz);
  int compare(const string& s) const;
  int compare(const char *s) const;

  string& operator += (const string &s);
  string& operator += (const char *str);
  string& operator += (char ch);

  string substr (int start, int n=npos);
  int     find   (const char * ps);
  int     find   (const string& s);
  int     find   (char ch);
  int     rfind  (char ch);
  int find_first_of (const string& str, int pos = 0);
  int find_first_of(const char * ps, int pos);
  int find_first_not_of (const string& str, int pos = 0);
  int find_first_not_of(const char * ps, int pos);

  string& insert(int pos, const char * s);
  string& insert(int pos, const string& s);
  string& erase (int pos = 0, int len = npos);

  string& replace (int pos, int len, const char* s);
  string& replace (int pos, int len, const string& s);
  void clear ();

  int resize(int size);

  static int npos;

};

 string operator + (string s1, string s2);

 inline int operator == (const string& s1, const string& s2) { return s1.compare(s2)==0; }
 inline int operator != (const string& s1, const string& s2) { return s1.compare(s2)!=0; }
 inline int operator != (const string& s1, const char*ps2) { return s1.compare(ps2)!=0; }
 inline int operator <  (const string& s1, const string& s2) { return s1.compare(s2)<0;  }
 //inline int operator <  (string s1, string& s2) { return s1.compare(s2)<0;  }
 inline int operator >  (string& s1, string& s2) { return s1.compare(s2)>0;  }


 std::ostream& operator << (std::ostream&, string);
 // ostream& operator << (ostream&, const string&);
 std::istream& operator >> (std::istream&, string&);

 std::istream& getline(std::istream& is, string& str);

 #endif

